Folder 26. API Practice: Thực hành tạo API kết nối tới Frontend

1, Tạo GET posts API để lấy danh sách bài viết ("Node-Backend/controllers/post.js")

2, Tạo POST post API để tạo bài viết mới ("Node-Backend/controllers/post.js")

3, Xác thực các dữ liệu nhập vào sao cho chính xác ("Node-Backend/controllers/post.js"), ("Node-Backend/route/post.js") 
-> sử dụng thư viện "express-validator"
-> Lưu ý: validator server side == client side (để tránh việc người dùng có thể tắt javascript để bypass validator)

4, Sử dụng database để lưu trữ dữ liệu ("Node-Backend/models/post.js")
-> sử dụng thư viện "mongoose"

5, Tạo GET post API để lấy thông tin chi tiết của bài viết ("Node-Backend/controllers/post.js"), ("Node-Backend/route/post.js")

6, Sửa POST post API và FE, thêm và tải lên hình ảnh vào đường dẫn để tạo bài viết mới 
("Node-Backend/controllers/post.js"), ("Node-Backend/server.js"), ("React-Frontend/src/pages/Feed/SinglePost/SinglePost.js")
-> Sử dụng module multer để upload file ảnh
-> Sử dụng module uuid để tạo id ngẫu nhiên, đặt tên file ảnh ngẫu nhiên (để tránh trùng tên file ảnh)'
-> Xử lý đường dẫn đến file ảnh chuyển về dạng từ \\ -> / (để tránh lỗi bên phía client)
-> Bên FE, sử dụng thư viện "FormData" để tạo object chứa dữ liệu và file ảnh để gửi lên server, thay vì dùng Headers application/json

7, Thêm tính năng, sửa cập nhật Post ("Node-Backend/controllers/post.js"), ("Node-Backend/route/post.js"), ("React-Frontend/src/pages/Feed/Feed.js")

8, Thêm tính nằng, xoá Post ("Node-Backend/controllers/post.js"), ("Node-Backend/route/post.js"), ("React-Frontend/src/pages/Feed/Feed.js")

9, Thêm modal user, thêm tính năng đăng ký, đăng nhập ("Node-Backend/controllers/auth.js"), ("Node-Backend/route/auth.js"), ("React-Frontend/src/App.js")
-> Sử dụng module bcrypt để mã hóa password
-> Sử dụng module jsonwebtoken để tạo token (để xác thực user khi đăng nhập, đăng ký thành công)
   -  Tạo ra access token và refresh token 
        + Lưu access token vào header Authorization của req (có thời hạn ngắn): dùng để xác thực user
        + Lưu refresh token vào cookie (có thời hạn dài): dùng để tạo access token mới khi access token hết hạn
-> Sử dụng module express-validator để xác thực dữ liệu nhập vào

10, Bảo vệ các routes bằng middleware ("Node-Backend/middleware/isAuth.js"), ("Node-Backend/route/post.js"), ("Node-Backend/route/auth.js")
 - Sử dụng module jsonwebtoken để xác thực user
 - Kiểm tra access token có hợp lệ hay không (có hết hạn hay không)  
    -> nếu hợp lệ thì cho phép truy cập vào các routes
    -> nếu không hợp lệ thì kiểm tra refresh token có hợp lệ hay không
        + nếu hợp lệ thì tạo access token mới (trả lại accessToken mới cho client) và cho phép truy cập vào các routes 
        + nếu không hợp lệ thì trả về lỗi
 - Xác thực việc đúng người dùng mới được thao tác về sản phẩm của mình
 - Tạo liên kết giữa post và user, khi xoá post => cũng xoá trường post trong user