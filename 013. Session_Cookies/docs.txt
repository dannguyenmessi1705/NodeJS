Source code lấy từ folder 12. Mongoose, thêm module express-session (dùng session với expressJS) và cookie-parser (dùng cookie với expressJS)

- Folder 13. Session, Cookies nói về session và cookies dùng để lưu trữ thông tin người dùng 
trên server (server side) và client (client side)

1, Thêm login page route ("./views/auth/login.ejs"), ("./routes/auth.js") ("./controllers/auth.js")

2, Tại sao phải dùng session và cookies? 
- Vì HTTP là stateless protocol, nghĩa là mỗi request là một request mới, không có liên quan gì với nhau
    + Ví dụ: Khi người dùng login vào hệ thống, lưu biến req.isLogin = true, khi người dùng request trang khác thì req.isLogin != true
 bởi vì khi người dùng request trang khác thì server sẽ tạo ra một req mới, không có liên quan gì với req trước đó nữa
 muốn vậy thì ta phải lưu vào middleware đặt trước các route (như req.user ở trong server.js), nhưng nếu lưu vào middleware thì mỗi lần request sẽ phải kiểm tra lại, rất tốn tài nguyên
=> Do đó để giải quyết vấn đề này, ta sử dụng session và cookies để lưu trữ thông tin người dùng trên server và client (phần 3)

3, Set Cookies khi đăng nhập ("./controllers/auth.js")
- Cách set cookies với EXPRESS JS + module cookie-parser:
    + Dùng res.cookie("cookieName", "cookieValue", {option}) để set cookies (express đã hỗ trợ)
    + Dùng res.clearCookie("cookieName") để xóa cookies (express đã hỗ trợ)
    + Dùng req.cookies.cookieName để lấy giá trị của cookies (express đã hỗ trợ)
    + Dùng req.signedCookies.cookieName để lấy giá trị của cookies đã được mã hóa (express đã hỗ trợ)
    + Dùng res.cookie("cookieName", "cookieValue", {signed: true}) để mã hóa cookies (express đã hỗ trợ)
    + Dùng res.cookie("cookieName", "cookieValue", {maxAge: 1000}) để set thời gian tồn tại của cookies (express đã hỗ trợ)
    + Dùng res.cookie("cookieName", "cookieValue", {httpOnly: true}) để set cookies chỉ có thể được truy cập bởi server (express đã hỗ trợ)
    + Dùng res.cookie("cookieName", "cookieValue", {secure: true}) để set cookies chỉ có thể được truy cập bởi https (express đã hỗ trợ)
    + Dùng res.cookie("cookieName", "cookieValue", {sameSite: true}) để set cookies chỉ có thể được truy cập bởi cùng một domain (express đã hỗ trợ)
    + Dùng res.cookie("cookieName", "cookieValue", {path: "/login"}) để set cookies chỉ có thể được truy cập bởi đường dẫn "/login" (express đã hỗ trợ)
    + Dùng res.cookie("cookieName", "cookieValue", {domain: "localhost"}) để set cookies chỉ có thể được truy cập bởi domain "localhost" (express đã hỗ trợ)
    + Dùng res.cookie("cookieName", "cookieValue", {expires: new Date(Date.now() + 1000)}) để set thời gian tồn tại của cookies (express đã hỗ trợ)

- Cách set cookies với NODE JS không thêm module nào cả:
    + res.setHeader("Set-Cookie", "cookieName=cookieValue; HttpOnly") để set cookies
    + req.headers.cookie để lấy giá trị của cookies
    + res.setHeader("Set-Cookie", "cookieName=cookieValue; Max-Age=1000") để set thời gian tồn tại của cookies
    + res.setHeader("Set-Cookie", "cookieName=cookieValue; Secure") để set cookies chỉ có thể được truy cập bởi https
    + res.setHeader("Set-Cookie", "cookieName=cookieValue; SameSite=Strict") để set cookies chỉ có thể được truy cập bởi cùng một domain
    + res.setHeader("Set-Cookie", "cookieName=cookieValue; Path=/login") để set cookies chỉ có thể được truy cập bởi đường dẫn "/login"
    + res.setHeader("Set-Cookie", "cookieName=cookieValue; Domain=localhost") để set cookies chỉ có thể được truy cập bởi domain "localhost"
    + res.setHeader("Set-Cookie", "cookieName=cookieValue; Expires=Thu, 01 Jan 1970 00:00:00 GMT") để set thời gian tồn tại của cookies

=> LƯU Ý: Khi dùng cookie sẽ dễ bị sửa giá trị của cookie, bị hack khi mở dev tool, nên dùng session để lưu trữ thông tin người dùng

4, Set Session khi đăng nhập ("./controllers/auth.js")