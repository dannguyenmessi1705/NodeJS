Source code lấy từ folder 17. Validation,
=> Update bảo vệ việc bị tấn công giả mạo bằng module mới: csrf thay cho csurf (không còn hỗ trợ nữa)
ở folder 14. Authentication ("server.js")

Folder 18. Error Handling nói về việc xử lý các lỗi trong ứng dụng, bắt lỗi để xứ lý, tránh trường hợp làm treo máy chủ

1, Các loại lỗi trong ứng dụng
   - Lỗi về mạng / kỹ thuật bên máy chủ (MongoDB, Redis, RabbitMQ, ...) bị sập
      -> Các lỗi này thường không thể xử lý được, chỉ có thể thông báo cho người dùng biết (render ra một trang thông báo lỗi)
   - Lỗi dự kiến, mong đợi: ví dụ như lỗi nhập sai mật khẩu, nhập sai email, lỗi truy cập vào một tài nguyên không có quyền truy cập, ...
      -> Các lỗi này có thể xử lý được, có thể thông báo cho người dùng biết, thử lại hoặc chuyển hướng người dùng đến một trang khác
   - Lỗi logic, bug: Do lỗi trong code, trong quá trình dev, ví dụ như lỗi chia cho 0, lỗi truy cập vào một phần tử không tồn tại trong mảng, ...
      -> Các lỗi này không nên báo cho người dùng biết, mà nên báo cho dev biết để fix

2, Hoạt động khi làm việc với lỗi 
   - Với các hàm, lỗi được ném ra bằng throw, và được bắt bằng try catch (giống như các ngôn ngữ khác) 
      + Với các route, lỗi được ném ra bằng next(error), và được bắt bằng app.use((error, req, res, next) => { ... })
      + Với các promise, lỗi được ném ra bằng reject, và được bắt bằng .catch(error => { ... })
      + Với các async function, lỗi được ném ra bằng throw, và được bắt bằng try catch (giống như các ngôn ngữ khác)
      => Sửa trực tiếp lỗi trong try catch, hoặc bắt lỗi bằng next(error) để chuyển hướng đến middleware xử lý lỗi
   - Nếu không có lỗi nào được ném ra bởi throw, bắt bằng try cacth, then,..
      + Kiểm tra xác thực đầu vào có phải là cáv giá trị hợp lệ hay không
      -> Nếu không  => Ném ra lỗi bằng throw, reject, next(error),...
      -> Nếu có     => Tiếp tục xử lý

3, Sử dụng try catch để bắt lỗi trong các hàm, async function, các route, các promise
   - Khi dùng try-catch: thay vì lỗi làm gián đoạn chương trình thì:
      + Nếu có lỗi xảy ra trong try, nó sẽ được bắt bởi catch, thực hiện tiếp các lệnh trong catch, và kết thúc try-catch
      + Nếu không có lỗi xảy ra trong try, nó sẽ tiếp tục xử lý

4, Tạo 1 page error để redirect tới mỗi khi gặp sự cố về máy chủ (MongoDB, Redis, RabbitMQ, ...)
   ("views/500.ejs"), ("controllers/"), ("routes/") 

5, Sử dụng error middleware để bắt lỗi trong các route, các promise, các async function
   - error middleware sẽ được gọi khi có lỗi xảy ra trong các route, các promise, các async function
   ("server.js"), ("controllers/"), ("routes/")
   - các lỗi được truyền vào error middleware bằng next(error) trong các route, các promise, các async function
   - xử lý bằng cách truyền thêm đối số error vào middleware, và xử lý error đó
   (app.use((error, req, res, next) => { ... }))
   - Các error middleware sẽ được ưu tiên gọi trước, và gọi từ trên xuống dưới nếu có nhiều error middleware

6, Các loại mã lỗi HTTP
   - 1xx: Informational
   - 2xx: Success
   - 3xx: Redirection
   - 4xx: Client Error
   - 5xx: Server Error
*** 1 Informational

100 Continue

101 Switching Protocols

102 Processing

*** 2 Success

200 OK

201 Created

202 Accepted

203 Non-authoritative Information

204 No Content

205 Reset Content

206 Partial Content

207 Multi-Status

208 Already Reported

226 IM Used

*** 3 Redirection

300 Multiple Choices

301 Moved Permanently

302 Found

303 See Other

304 Not Modified

305 Use Proxy

307 Temporary Redirect

308 Permanent Redirect

*** 4 Client Error

400 Bad Request

401 Unauthorized

402 Payment Required

403 Forbidden

404 Not Found

405 Method Not Allowed

406 Not Acceptable

407 Proxy Authentication Required

408 Request Timeout

409 Conflict

410 Gone

411 Length Required

412 Precondition Failed

413 Payload Too Large

414 Request-URI Too Long

415 Unsupported Media Type

416 Requested Range Not Satisfiable

417 Expectation Failed

418 I'm a teapot

421 Misdirected Request

422 Unprocessable Entity

423 Locked

424 Failed Dependency

426 Upgrade Required

428 Precondition Required

429 Too Many Requests

431 Request Header Fields Too Large

444 Connection Closed Without Response

451 Unavailable For Legal Reasons

499 Client Closed Request

*** 5 Server Error

500 Internal Server Error

501 Not Implemented

502 Bad Gateway

503 Service Unavailable

504 Gateway Timeout

505 HTTP Version Not Supported

506 Variant Also Negotiates

507 Insufficient Storage

508 Loop Detected

510 Not Extended

511 Network Authentication Required

599 Network Connect Timeout Error