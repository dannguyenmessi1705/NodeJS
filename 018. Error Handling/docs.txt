Source code lấy từ folder 17. Validation,
=> Update bảo vệ việc bị tấn công giả mạo bằng module mới: csrf thay cho csurf (không còn hỗ trợ nữa)
ở folder 14. Authentication ("server.js")

Folder 18. Error Handling nói về việc xử lý các lỗi trong ứng dụng

1, Các loại lỗi trong ứng dụng
   - Lỗi về mạng / kỹ thuật bên máy chủ (MongoDB, Redis, RabbitMQ, ...) bị sập
      -> Các lỗi này thường không thể xử lý được, chỉ có thể thông báo cho người dùng biết (render ra một trang thông báo lỗi)
   - Lỗi dự kiến, mong đợi: ví dụ như lỗi nhập sai mật khẩu, nhập sai email, lỗi truy cập vào một tài nguyên không có quyền truy cập, ...
      -> Các lỗi này có thể xử lý được, có thể thông báo cho người dùng biết, thử lại hoặc chuyển hướng người dùng đến một trang khác
   - Lỗi logic, bug: Do lỗi trong code, trong quá trình dev, ví dụ như lỗi chia cho 0, lỗi truy cập vào một phần tử không tồn tại trong mảng, ...
      -> Các lỗi này không nên báo cho người dùng biết, mà nên báo cho dev biết để fix

2, Hoạt động khi làm việc với lỗi 
   - Với các hàm, lỗi được ném ra bằng throw, và được bắt bằng try catch (giống như các ngôn ngữ khác) 
      + Với các route, lỗi được ném ra bằng next(error), và được bắt bằng app.use((error, req, res, next) => { ... })
      + Với các promise, lỗi được ném ra bằng reject, và được bắt bằng .catch(error => { ... })
      + Với các async function, lỗi được ném ra bằng throw, và được bắt bằng try catch (giống như các ngôn ngữ khác)
      => Sửa trực tiếp lỗi trong try catch, hoặc bắt lỗi bằng next(error) để chuyển hướng đến middleware xử lý lỗi
   - Nếu không có lỗi nào được ném ra bởi throw, bắt bằng try cacth, then,..
      + Kiểm tra xác thực đầu vào có phải là cáv giá trị hợp lệ hay không
      -> Nếu không  => Ném ra lỗi bằng throw, reject, next(error),...
      -> Nếu có     => Tiếp tục xử lý

3, Sử dụng try catch để bắt lỗi trong các hàm, async function, các route, các promise
   - Khi dùng try-catch: thay vì lỗi làm gián đoạn chương trình thì:
      + Nếu có lỗi xảy ra trong try, nó sẽ được bắt bởi catch, thực hiện tiếp các lệnh trong catch, và kết thúc try-catch
      + Nếu không có lỗi xảy ra trong try, nó sẽ tiếp tục xử lý

4, Tạo 1 page error để redirect tới mỗi khi gặp sự cố về máy chủ (MongoDB, Redis, RabbitMQ, ...)
   ("views/505.ejs"), ("controllers/"), ("routes/") 